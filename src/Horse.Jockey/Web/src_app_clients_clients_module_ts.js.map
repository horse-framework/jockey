{"version":3,"file":"src_app_clients_clients_module_ts.js","mappings":"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","sources":["./src/app/clients/clients.component.ts","./src/app/clients/clients.component.html","./src/app/clients/clients.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { BaseComponent } from 'src/lib/base-component';\r\nimport { HorseClient } from 'src/models/horse-client';\r\nimport { ClientService } from 'src/services/client.service';\r\n\r\ninterface NameGroupedClients {\r\n    name: string;\r\n    clients: HorseClient[];\r\n}\r\n\r\ninterface GroupedClient {\r\n    type: string;\r\n    name: string;\r\n    client: HorseClient;\r\n    typeCount?: number;\r\n    nameCount?: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-clients',\r\n    templateUrl: './clients.component.html',\r\n    styleUrls: ['./clients.component.css']\r\n})\r\nexport class ClientsComponent extends BaseComponent implements OnInit {\r\n\r\n    model: GroupedClient[] = null;\r\n\r\n    constructor(private clientService: ClientService) {\r\n        super();\r\n    }\r\n\r\n    async ngOnInit() {\r\n\r\n        let clients = await this.clientService.list();\r\n        let model: GroupedClient[] = [];\r\n\r\n        let latestType: string = '';\r\n        let latestName: string = '';\r\n        let counts = {};\r\n\r\n        clients.forEach(c => {\r\n\r\n            let typeKey = this.findTypeKey(c.type, c.name);\r\n            let nameKey = this.findNameKey(c.type, c.name);\r\n            if (counts[typeKey]) { counts[typeKey]++; }\r\n            else { counts[typeKey] = 1; }\r\n            if (counts[nameKey]) { counts[nameKey]++; }\r\n            else { counts[nameKey] = 1; }\r\n\r\n            let item: GroupedClient = {\r\n                type: c.type == latestType ? '*' : c.type,\r\n                name: c.name == latestName ? '*' : c.name,\r\n                client: c\r\n            };\r\n\r\n            latestType = c.type;\r\n            latestName = c.name;\r\n            model.push(item);\r\n        });\r\n\r\n        model.forEach(c => {\r\n            let typeKey = this.findTypeKey(c.client.type, c.client.name);\r\n            let nameKey = this.findNameKey(c.client.type, c.client.name);\r\n            c.typeCount = counts[typeKey];\r\n            c.nameCount = counts[nameKey];\r\n        });\r\n\r\n        this.model = model;\r\n    }\r\n\r\n    private findTypeKey(type: string, name: string): string {\r\n        let tkey = type ? ('*t*' + type) : '*tn';\r\n        return tkey;\r\n    }\r\n\r\n    private findNameKey(type: string, name: string): string {\r\n        let tkey = type ? ('*t*' + type) : '*tn';\r\n        let nkey = name ? ('*n*' + name) : '*nn';\r\n        return tkey + '_' + nkey;\r\n    }\r\n\r\n}\r\n","<div class=\"clients\" *ngIf=\"model\">\r\n    <div class=\"table\">\r\n        <div class=\"thead\">\r\n            <div class=\"th fx16\">\r\n                Type\r\n                <em>({{model.length}} Clients)</em>\r\n            </div>\r\n            <div class=\"th fx16\">Name</div>\r\n            <div class=\"th fx20\">Unique Id</div>\r\n            <div class=\"th fx12\">Remote IP Address</div>\r\n            <div class=\"th fx12\">Is Authenticated</div>\r\n            <div class=\"th fx12\">Protocol</div>\r\n            <div class=\"th fx12\">Connected Date</div>\r\n        </div>\r\n        <div class=\"tbody\">\r\n            <ng-container *ngFor=\"let item of model\">\r\n                <div *ngIf=\"item.type != '*'\" style=\"height: 1px; background-color: #109040;\"></div>\r\n                <div *ngIf=\"item.type == '*' && item.name != '*'\" style=\"height: 1px; background-color: #666;\"></div>\r\n                <div class=\"trow\">\r\n                    <div class=\"td fx16\">\r\n                        <ng-container *ngIf=\"item.type != '*'\">\r\n                            <span *ngIf=\"item.type\">{{item.type}} <em>({{item.typeCount}} Clients)</em></span>\r\n                            <em *ngIf=\"!item.type\">Not Specified</em>\r\n                        </ng-container>\r\n                    </div>\r\n                    <div class=\"td fx16\">\r\n                        <ng-container *ngIf=\"item.name != '*'\">\r\n                            <span *ngIf=\"item.name\">{{item.name}} <em>({{item.nameCount}} Clients)</em></span>\r\n                            <em *ngIf=\"!item.name\">Not Specified</em>\r\n                        </ng-container>\r\n                    </div>\r\n                    <div class=\"td fx20\">\r\n                        <span>{{item.client.uniqueId}}</span>\r\n                    </div>\r\n                    <div class=\"td fx12\">\r\n                        <span *ngIf=\"item.client.ip\">{{item.client.ip}}</span>\r\n                        <em *ngIf=\"!item.client.ip\">Unknown</em>\r\n                    </div>\r\n                    <div class=\"td fx12\">\r\n                        <span>{{item.client.isAuthenticated ? 'Yes' : 'No'}}</span>\r\n                    </div>\r\n                    <div class=\"td fx12\">\r\n                        <span>{{item.client.protocol}}</span>                        \r\n                    </div>\r\n                    <div class=\"td fx12\">\r\n                        <span>{{(item.client.connectedDate*1000) | date: 'yyyy-MM-dd HH:mm:ss'}}</span>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClientsComponent } from './clients.component';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n\r\n@NgModule({\r\n    declarations: [ClientsComponent],\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule.forChild([{ path: '', component: ClientsComponent }])\r\n    ]\r\n})\r\nexport class ClientsModule { }\r\n"],"names":[],"sourceRoot":"webpack:///"}
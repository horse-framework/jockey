{"version":3,"file":"src_app_channels_channels_module_ts.js","mappings":"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","sources":["./src/app/channels/channel-create-modal/channel-create-modal.component.ts","./src/app/channels/channel-create-modal/channel-create-modal.component.html","./src/app/channels/channel-message-modal/channel-message-modal.component.ts","./src/app/channels/channel-message-modal/channel-message-modal.component.html","./src/app/channels/channels.component.ts","./src/app/channels/channels.component.html","./src/app/channels/channels.module.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { ChannelForm } from 'src/app/channels/models/channel-form';\n\n@Component({\n  selector: 'app-channel-create-modal',\n  templateUrl: './channel-create-modal.component.html',\n  styleUrls: ['./channel-create-modal.component.css']\n})\nexport class ChannelCreateModalComponent implements OnInit, OnDestroy {\n\n  model: ChannelForm;\n\n  private _onconfirmed: Subject<ChannelForm> = new Subject<ChannelForm>();\n  get onconfirmed(): Observable<ChannelForm> { return this._onconfirmed; }\n  private _confirmed: boolean = false;\n\n\n  constructor() {\n    this.model = {\n      name: '',\n      topic: '',\n      autoDestroy: true,\n      autoDestroyIdleSeconds: 15,\n      clientLimit: 0,\n      messageSizeLimit: 0,\n      sendLastMessageAsInitial: false\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    if (!this._confirmed)\n      this._onconfirmed.next(null);\n  }\n  create(): void {\n    this._confirmed = true;\n    this._onconfirmed.next(this.model);\n  }\n}\n","<h2 class=\"title\" mat-dialog-title>Create New Channel</h2>\n<mat-dialog-content class=\"content\">\n    <div>\n        <div class=\"form-item\">\n            <label>Channel Name</label>\n            <input placeholder=\"Channel Name\" class=\"jockey-text\" type=\"text\" [(ngModel)]=\"model.name\" />\n        </div>\n        <div class=\"form-item\">\n            <label>Topic</label>\n            <input placeholder=\"Left blank if you don't need\" class=\"jockey-text\" type=\"text\" [(ngModel)]=\"model.topic\" />\n        </div>\n        <div class=\"form-item\">\n            <label>Client Limit</label>\n            <input placeholder=\"Zero for unlimited\" class=\"jockey-text\" type=\"number\" [(ngModel)]=\"model.clientLimit\" />\n        </div>\n        <div class=\"form-item\">\n            <label>Message Size Limit (in bytes)</label>\n            <input placeholder=\"Zero for unlimited\" class=\"jockey-text\" type=\"number\" [(ngModel)]=\"model.messageSizeLimit\" />\n        </div>\n        <div class=\"kvt-row\">\n            <div class=\"kvt-key-narrow\">Use Initial Message</div>\n            <div class=\"kvt-value\">\n                <input class=\"jockey-text\" type=\"checkbox\" [(ngModel)]=\"model.sendLastMessageAsInitial\" />\n            </div>\n        </div>\n        <div class=\"kvt-row\">\n            <div class=\"kvt-key-narrow\">Auto Destroy</div>\n            <div class=\"kvt-value\">\n                <input class=\"jockey-text\" type=\"checkbox\" [(ngModel)]=\"model.autoDestroy\" />\n            </div>\n        </div>\n        <div class=\"form-item\">\n            <label>Auto Destroy Idle (in seconds)</label>\n            <input placeholder=\"Left blank for server default\" class=\"jockey-text\" type=\"number\" [(ngModel)]=\"model.autoDestroyIdleSeconds\" />\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions class=\"buttons\">\n    <button (click)=\"create()\" mat-button mat-dialog-close class=\"modal-btn btn-green\">Create Channel</button>\n    <button mat-button mat-dialog-close class=\"modal-btn btn-grey\">Cancel</button>\n</mat-dialog-actions>","import { Component } from '@angular/core';\nimport { HorseMessage } from 'src/models/horse-message';\nimport { ChannelService } from 'src/app/channels/services/channel.service';\n\n@Component({\n  selector: 'app-channel-message-modal',\n  templateUrl: './channel-message-modal.component.html',\n  styleUrls: ['./channel-message-modal.component.css']\n})\nexport class ChannelMessageModalComponent {\n\n  message: HorseMessage;\n  isJson: boolean = false;\n\n  constructor(private service: ChannelService) { }\n\n  load(channelName: string): void {\n    this.service.getInitialMessage(channelName)\n      .then(msg => {\n        this.message = msg;\n        try {\n          this.message.contentObj = JSON.parse(this.message.content);\n        }\n        catch { }\n      });\n  }\n\n  setJson(value: boolean) {\n    this.isJson = value;\n  }\n}\n","<h2 class=\"title\" mat-dialog-title>Channel Message</h2>\n<mat-dialog-content class=\"content\">\n    <div class=\"queue-message\" *ngIf=\"message\">\n        <div class=\"message-props\">\n            <h4>Headers</h4>\n            <div class=\"message-headers\">\n                <div class=\"key-value-table\" *ngIf=\"message.headers && message.headers.length > 0\">\n                    <div class=\"kvt-row\" *ngFor=\"let h of message.headers\">\n                        <div class=\"kvt-key\">{{h.name}}</div>\n                        <div class=\"kvt-value\">{{h.value}}</div>\n                    </div>\n                </div>\n                <p *ngIf=\"!message.headers || message.headers.length == 0\">\n                    The message has no headers\n                </p>\n            </div>\n        </div>\n        <div class=\"message-content\" *ngIf=\"message\">\n            <div class=\"message-content-title\">\n                <h4>Message Content</h4>\n                <span (click)=\"setJson(false)\" [class.active]=\"!isJson\">String</span>\n                <span (click)=\"setJson(true)\" [class.active]=\"isJson\">JSON</span>\n            </div>\n            <div class=\"string-content\" *ngIf=\"!isJson\">{{message.content}}</div>\n            <pre class=\"string-content\" *ngIf=\"isJson\" [innerHTML]=\"message.contentObj | prettyprint\"></pre>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions class=\"buttons\">\n    <button mat-button mat-dialog-close class=\"modal-btn btn-red\">Close</button>\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\nimport { BaseComponent } from 'src/lib/base-component';\nimport { ChannelInfo } from 'src/app/channels/models/channel-info';\nimport { ChannelService } from 'src/app/channels/services/channel.service';\nimport { ChannelCreateModalComponent } from './channel-create-modal/channel-create-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\nimport { ChannelMessageModalComponent } from './channel-message-modal/channel-message-modal.component';\n\n@Component({\n  selector: 'app-channels',\n  templateUrl: './channels.component.html',\n  styleUrls: ['./channels.component.css']\n})\nexport class ChannelsComponent extends BaseComponent implements OnInit {\n\n  channels: ChannelInfo[];\n\n  constructor(private dialog: MatDialog, private channelService: ChannelService) {\n    super();\n  }\n\n  async ngOnInit() {\n    this.channels = await this.channelService.list();\n  }\n\n  create(): void {\n\n    let dialogRef = this.dialog.open(ChannelCreateModalComponent, { width: '400px' });\n    let component = <ChannelCreateModalComponent>dialogRef.componentInstance;\n\n    component.onconfirmed\n      .pipe(take(1))\n      .subscribe(value => {\n        if (value)\n          this.channelService\n            .create(value)\n            .then(msg => {\n              this.ngOnInit();\n            });\n      });\n  }\n\n  viewInitialMessage(channel: ChannelInfo): void {\n\n    let dialogRef = this.dialog.open(ChannelMessageModalComponent, { width: '800px' });\n    let component = <ChannelMessageModalComponent>dialogRef.componentInstance;\n    component.load(channel.name);\n  }\n\n}\n","<div class=\"channels\" *ngIf=\"channels\">\n    <div class=\"table\">\n        <div class=\"thead\">\n            <div class=\"th fx40px\">\n                <a class=\"fa fa-solid fa-plus hreverse\" (click)=\"create()\" title=\"Create New Channel\"></a>\n            </div>\n            <div class=\"th fx20\">\n                Name\n                <em>({{channels.length}} Channels)</em>\n            </div>\n            <div class=\"th fx14\">Topic</div>\n            <div class=\"th fx10\">Status</div>\n            <div class=\"th fx10\">Published</div>\n            <div class=\"th fx10\">Received</div>\n            <div class=\"th fx10\">Subscribers</div>\n            <div class=\"th fx12\">Last Publish Date</div>\n            <div class=\"th fx10\">Initial Message</div>\n        </div>\n        <div class=\"tbody\">\n            <div class=\"trow\" *ngFor=\"let channel of channels\">\n                <div class=\"td fx40px\"></div>\n                <div class=\"td fx20\">\n                    <span>{{channel.name}}</span>\n                </div>\n                <div class=\"td fx14\">\n                    <span>{{channel.topic}}</span>\n                </div>\n                <div class=\"td fx10\">\n                    <span>{{channel.status}}</span>\n                </div>\n                <div class=\"td fx10\">\n                    <span>{{channel.publish}}</span>\n                </div>\n                <div class=\"td fx10\">\n                    <span>{{channel.receive}}</span>\n                </div>\n                <div class=\"td fx10\">\n                    <span>{{channel.subscriberCount}} Online</span>\n                </div>\n                <div class=\"td fx12\">\n                    <span>{{(channel.lastPublishDate*1000) | date: 'yyyy-MM-dd HH:mm:ss'}}</span>\n                </div>\n                <div class=\"td fx10\">\n                    <em *ngIf=\"!channel.hasInitialMessage\">No Initial Message</em>\n                    <span *ngIf=\"channel.hasInitialMessage\">\n                        <a (click)=\"viewInitialMessage(channel)\">View</a>\n                    </span>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"create-end\">\n        <button (click)=\"create()\">Create New Channel</button>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChannelsComponent } from './channels.component';\nimport { RouterModule } from '@angular/router';\nimport { PipesModule } from '../layout/pipes/pipes.module';\nimport { ChannelCreateModalComponent } from './channel-create-modal/channel-create-modal.component';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FormsModule } from '@angular/forms';\nimport { ChannelMessageModalComponent } from './channel-message-modal/channel-message-modal.component';\n\n\n@NgModule({\n  declarations: [ChannelsComponent, ChannelCreateModalComponent, ChannelMessageModalComponent],\n  imports: [\n    CommonModule,\n    PipesModule,\n    MatDialogModule,\n    FormsModule,\n    RouterModule.forChild([{ path: '', component: ChannelsComponent }])\n  ]\n})\nexport class ChannelsModule { }\n"],"names":[],"sourceRoot":"webpack:///"}